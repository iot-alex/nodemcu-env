#!/usr/bin/env python -t


# This is a silly little tool for chatting with NodeMCU.

import argparse
import os.path
import serial
import socket
import socketserver
import sys
import time
import threading

DEBUG = False

BAUDRATE = 9600
DEFAULT_PORT = 9600  # lol why not
BROADCAST_PORT = 5050


class ESPConn:
    """ Abstract base class representing a connection to an ESP"""
    def readuntil(self, delim):
        """ Read until a delimiter is seen"""
        buf = self.read(1)
        while not buf.endswith(delim):
            buf += self.read(1)
        return buf

    def do_command(self, command):
        self.write(command + self.newline)
        response = self.readuntil(self.newline + b'> ')
        if DEBUG:
            print ("Got response: " + response.decode('ascii'))
        responses = response.split(self.newline)

        # telnet mode has no echo, serial does
        # snarf the echoed command from serial
        if self.consume_echo and len(responses) > 0:
            responses = responses[1:]

        if len(responses) > 0:
            return responses[:-1]


class SerialConn(ESPConn):
    r""" Handle a serial connection to an ESP
    This uses \r\n as the EOL marker, and uses remote echo
    """
    def __init__(self, port):
        self.port = serial.Serial(port, BAUDRATE)

        self.newline = b'\r\n'
        self.consume_echo = True

        if DEBUG:
            print("Flushing serial port")
        self.write(self.newline)  # flush whatever state the repl is in

        self.port.timeout = 2
        self.port.read(100)

        self.port.timeout = 10

    def write(self, buf):
        if DEBUG:
            print("WRITE COMMAND: " + str(buf))
        self.port.write(buf)

    def read(self, length):
        return self.port.read(length)


class TelnetConn(ESPConn):
    r""" Represents a telnet connection to an ESP
    This uses \n as the EOL marker and does not have remote echo
    """

    def __init__(self, ip, port):
        self.newline = b'\n'
        self.consume_echo = False

        self.sock = socket.create_connection((ip, port))
        self.sock.settimeout(2)

        self.sock.send(self.newline)
        self.readuntil(self.newline + b'> ')

    def write(self, buf):
        self.sock.sendall(buf)

    def read(self, length):
        return self.sock.recv(length)


class FileServer:
    """ Open up a port that, upon connection, spits out the contents
    of a file, then immediately closes

    Essentially equivalent to nc -l -p 9600 < path_to_file
    """

    def __init__(self, filepath, port=DEFAULT_PORT):
        self.filepath = filepath
        self.port = port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.bind(('0.0.0.0', port))
        self.socket.listen(1)

        self.event = threading.Event()

    def serve(self):
        self.thread = threading.Thread(target=self._serve, daemon=False)
        self.thread.start()

    def stop(self):
        self.socket.close()

    def _serve(self):
        """ Called by thread"""
        conn, addr = self.socket.accept()

        # be lazy, read the whole file in to memory
        contents = open(self.filepath, 'rb').read()
        conn.sendall(contents)
        conn.close()
        self.event.set()


class BroadcastListener(socketserver.BaseRequestHandler):
    """
    Listen for UDP broadcasts from the booted ESP
    """
    def handle(self):
        data = self.request[0].strip()
        fields = data.split(b' ')

        if len(fields) != 3:
            print("Got invalid data (a)! [{}]".format(data))
            return

        if fields[0] != b'PING!':
            print ("Got invalid data (b)! [{}]".format(data))
            return

        ip = self.client_address[0]
        chipid = fields[2]

        self.server.ping_callback(ip, chipid)


def main():
    args = parse_args()

    if args.debug:
        global DEBUG
        DEBUG = True

    command = args.op
    if command == 'wifi':
        setup_wifi(args.port[0],
                   args.network_password[0], args.network_password[1])

    elif command == 'bootstrap':
        bootstrap(args.port[0])

    elif command == 'watch':
        ping_watch()

    elif command == 'send':
        send_file(args.src, args.dst, args.ip, args.chip_id)


def setup_wifi(port, ssid, password):
    """Issue the serial commands to set up wifi"""

    sp = SerialConn(port)

    print("Configuring WiFi settings via serial...")

    sp.do_command(b'wifi.setmode(wifi.STATION)')

    wifi_cmd = b'wifi.sta.config("' + escape_lua(bytes(ssid, 'ascii')) + b'", "'\
               + escape_lua(bytes(password, 'ascii')) + b'")'
    sp.do_command(wifi_cmd)
    time.sleep(10)
    resp = sp.do_command(b'print(wifi.sta.getip())')
    resp = resp[0]
    resp = resp.split(b'\t')
    print("Successfully got IP address " + resp[0].decode('ascii'))
    print("Now load the boostrap environment with 'boostrap'")


def bootstrap(port):
    """ Load the initial lua file over the serial port """
    sp = SerialConn(port)

    print("Removing any old files")
    res = sp.do_command(b'file.format(); ' +
                        b'print("OK")')

    if res[-1] != b'OK':
        print("Command failed!")
        print(res)
        return False

    # Start the fileserver
    print("Starting fileserver")
    basedir = os.path.dirname(sys.argv[0])
    init_path = os.path.join(basedir, 'lua', 'init.lua')
    fs = FileServer(init_path)
    fs.serve()

    local_ip = socket.gethostbyname(socket.gethostname())
    res = sp.do_command(bytes(
        'ip="{}"; filename="init.lua"; print("OK")'.format(local_ip), 'ascii'))
    if res[0] != b'OK':
        print("Command failed!")
        print(res)
        return False

    print("Downloading file")

    bootstrap_cmd = b'sk = net.createConnection(net.TCP, 0); ' + \
        b'file.open(filename, "w+"); ' + \
        b'sk:on("receive", function(sck, c) file.write(c) ; end ); ' + \
        b'sk:on("disconnection", function(sock, a) file.flush(); file.close(); end); ' + \
        b'sk:connect(' + bytes(str(DEFAULT_PORT), 'ascii') + b', ip); ' + \
        b'print("OK")'
    res = sp.do_command(bootstrap_cmd)

    if res[0] != b'OK':
        fs.stop()
        print("Command failed")
        print(res)
        return False

    fs.event.wait()  # Wait for the server to say that it's done
    fs.stop()

    res = sp.do_command(b'print(node.chipid())')
    chipid = res[0]
    print ("Bootstrap of chip {} successful! ".format(chipid.decode('ascii')) +
           "Run mcutool watch, then reboot module, to connect")
    return True


def _print_ping(ip, chipid):
    print("Ping!\tip: {}\tchipid: {}".format(ip, chipid.decode('ascii')))


def ping_watch(cb=_print_ping):
    """ Watch for the boot pings.
    Args:
        target - the chipid to watch for. if none, select all
        cb: function to call when there's a hit
    """
    server = socketserver.UDPServer(('0.0.0.0', BROADCAST_PORT),
                                    BroadcastListener)
    server.ping_callback = cb
    server.serve_forever()


def send_file(src, dst, target_ip=None, target_chipid=None):
    """ Wait for a booting ESP to connect, then telnet in and send
    a file """

    def send_cb(ip, chipid):
        if target_chipid and chipid != bytes(target_chipid, 'ascii'):
            return

        # Open up the serving socket.
        fs = FileServer(src)
        fs.serve()

        local_ip = socket.gethostbyname(socket.gethostname())
        conn = TelnetConn(ip, 2323)
        res = conn.do_command(
            b'getfile("' + bytes(local_ip, "ascii") + b'", "' +
            bytes(dst, "ascii") +
            b'"); print("OK")')

        if res[0] != b'OK':
            print("Something failed")
            print(res)

        fs.event.wait()
        print("File successfully uploaded")

        fs.stop()

    if target_ip:
        send_cb(target_ip, None)
    else:
        ping_watch(send_cb)


def escape_lua(instr):
    """ Turn an arbitrary string in to a valid Lua string literal by
    escaping as necessary """

    instr = instr.replace(b'\\', b'\\\\')
    instr = instr.replace(b"'", b"\\'")
    instr = instr.replace(b'"', b'\\"')
    instr = instr.replace(b"[", b"\\[")
    instr = instr.replace(b"]", b"\\]")
    return instr


def parse_args():
    parser = argparse.ArgumentParser(description="Make NodeMCU a little kinder")

    parser.add_argument('--debug', '-d', default=False, action='store_true',
                        help="Be verbose about things")

    subparsers = parser.add_subparsers(
        dest='op')

    parser_wifi = subparsers.add_parser(
        'wifi', help="Connect to a wifi network")

    parser_wifi.add_argument('--port', '-p', nargs=1,
                             help="serial port", required=True)

    parser_wifi.add_argument('network_password', nargs='+',
                             help='network name and password',
                             metavar="SSID PASSWORD")

    parser_boot = subparsers.add_parser(
        'bootstrap', help="Upload init.lua file")

    parser_boot.add_argument('--port', '-p', nargs=1,
                             help="serial port", required=True)

    subparsers.add_parser(
        'watch', help="Watch for boards to boot up, and print their info")

    parser_send = subparsers.add_parser(
        'send', help="Send a file to a given target. If no target is " +
        "specified, send it to the next board that boots")

    parser_send.add_argument('--ip', action='store',
                             help="The IP to connect to")

    parser_send.add_argument('--chip-id', action='store', metavar="CHIPID",
                             help="Wait for CHIPID to send a broadcast, then " +
                             "connect to that")

    parser_send.add_argument('src', help="The file on disk to send")

    parser_send.add_argument('dst', help="The destination filename on the ESP")

    args = parser.parse_args()

    return args


if __name__ == '__main__':
    main()
